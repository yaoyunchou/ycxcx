<view class="home">
  <view class="h3">
    NodeJS的全栈式开发
  </view>
  <view class="home-head">
    随着不同终端(Pad/Mobile/PC)的兴起，对开发人员的要求越来越高，纯浏览器端的响应式已经不能满足用户体验的高要求，我们往往需要针对不同的终端开发定制的版本。为了提升开发效率，前后端分离的需求越来越被重视，后端负责业务/数据接口，前端负责展现/交互逻辑，同一份数据接口，我们可以定制开发多个版本。
  </view>
    <view class="h3">
      一、什么是前后端分离？
    </view>
  <view class="phone">
  
    <text>
          最开始组内讨论的过程中我发现，每个人对前后端分离的理解不一样，为了保证能在同一个频道讨论，先就什么是”前后端分离”达成一致。
          </text>
    <text>
          大家一致认同的前后端分离的例子就是SPA(Single-page application)，所有用到的展现数据都是后端通过异步接口(AJAX/JSONP)的方式提供的，前端只管展现。
         </text>
    <text>
        从某种意义上来说，SPA确实做到了前后端分离，但这种方式存在两个问题：WEB服务中，SPA类占的比例很少。很多场景下还有同步/同步+异步混合的模式，SPA不能作为一种通用的解决方案。
        </text>
    <text>
        现阶段的SPA开发模式，接口通常是按照展现逻辑来提供的，有时候为了提高效率，后端会帮我们处理一些展现逻辑，这就意味着后端还是涉足了View层的工作，不是真正的前后端分离。SPA式的前后端分离，是从物理层做区分（认为只要是客户端的就是前端，服务器端的就是后端），这种分法已经无法满足我们前后端分离的需求，我们认为从职责上划分才能满足目前我们的使用场景：前端：负责View和Controller层。后端：只负责Model层，业务处理/数据等。为什么去做这种职责的划分，后面会继续探讨。
        </text>

  </view>
  <view class="taobao">
    淘宝店铺：https://shop71553004.taobao.com

  </view>
</view>